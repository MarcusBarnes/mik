<?php
// src/metadataparsers/templated/Templated.php

namespace mik\metadataparsers\templated;

use mik\metadataparsers\MetadataParser;
use \Twig\Twig;
use \Monolog\Logger;

/**
 * Templated metadata parser - Generates MODS or DC XML from a Twig template.
 */
class Templated extends MetadataParser
{
    public function __construct($settings)
    {
        parent::__construct($settings);
        $fetcherClass = 'mik\\fetchers\\' . $settings['FETCHER']['class'];
        $this->fetcher = new $fetcherClass($settings);

        $this->templateDirectory = pathinfo($settings['METADATA_PARSER']['template'], PATHINFO_DIRNAME);
        $this->templateFilename = pathinfo($settings['METADATA_PARSER']['template'], PATHINFO_BASENAME);

        if (isset($this->settings['MANIPULATORS']['metadatamanipulators'])) {
            $this->metadatamanipulators = $this->settings['MANIPULATORS']['metadatamanipulators'];
        } else {
            $this->metadatamanipulators = null;
        }
    }

    /**
     * {@inheritdoc}
     *
     *  Returns the output of the template.
     */
    public function metadata($record_key)
    {
        $objectInfo = $this->fetcher->getItemInfo($record_key);
        $metadata = $this->populateTemplate($record_key, $objectInfo);
        return $metadata;
    }

    /**
     * Renders a Twig template.
     *
     * @param string $record_key
     *   The current item's record_key.
     * @param object $objectInfo
     *   The current item's metadata as generated by the fetcher.
     *
     * @return string
     *   The output of the template.
     */
    public function populateTemplate($record_key, $objectInfo)
    {
        $loader = new \Twig_Loader_Filesystem($this->templateDirectory);
        $twig = new \Twig_Environment($loader);

        $truncate_filter = new \Twig_SimpleFilter('TwigTruncate', 'mik\utilities\MikTwigExtension::TwigTruncate');
        $twig->addFilter($truncate_filter);

        $xml_from_template = $twig->render($this->templateFilename, (array) $objectInfo);

        if (isset($this->metadatamanipulators)) {
            $modified_xml = $this->applyMetadatamanipulators($record_key, $xml_from_template);
            $xml_from_template = $modified_xml;
        }

        return trim($xml_from_template);
    }

    /**
     * Applies metadatamanipulators listed in the config to provided XML snippet.
     *
     * @param string $record_key
     *   The current item's record_key.
     * @param string $xml
     *     The XML document as it was rendered by the Twig template.
     *
     * @return string
     *     The modified XML document.
     */
    private function applyMetadatamanipulators($record_key, $xml)
    {
        foreach ($this->metadatamanipulators as $metadatamanipulator) {
            $metadatamanipulatorClassAndParams = explode('|', $metadatamanipulator);
            $metadatamanipulatorClassName = array_shift($metadatamanipulatorClassAndParams);
            $manipulatorParams = $metadatamanipulatorClassAndParams;
            $metdataManipulatorClass = 'mik\\metadatamanipulators\\' . $metadatamanipulatorClassName;
            $metadatamanipulator = new $metdataManipulatorClass($this->settings, $manipulatorParams, $record_key);
            $modified_xml = $metadatamanipulator->manipulate($xml);
        }

        return $modified_xml;
    }
}
