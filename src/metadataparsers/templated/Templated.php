<?php
// src/metadataparsers/templated/Templated.php

namespace mik\metadataparsers\templated;

use mik\metadataparsers\MetadataParser;
use \Twig\Twig;
use \Monolog\Logger;

/**
 * Templated metadata parser - Generates MODS or DC XML from a Twig template.
 */
class Templated extends MetadataParser
{
    public function __construct($settings)
    {
        parent::__construct($settings);
        $fetcherClass = 'mik\\fetchers\\' . $settings['FETCHER']['class'];
        $this->fetcher = new $fetcherClass($settings);

        $this->templateDirectory = pathinfo($settings['METADATA_PARSER']['template'], PATHINFO_DIRNAME);
        $this->templateFilename = pathinfo($settings['METADATA_PARSER']['template'], PATHINFO_BASENAME);
    }

    /**
     * Wrapper mmethod called from within the mik script.
     *
     * @param string $record_key
     *   The current item's record key.
     *
     * @return string
     *   The output of the template.
     */
    public function metadata($record_key)
    {
        $objectInfo = $this->fetcher->getItemInfo($record_key);
        $metadata = $this->populateTemplate($objectInfo);
        return $metadata;
    }

    /**
     * Renders a Twig template.
     *
     * @param object $objectInfo
     *   The current item's metadata as generated by the fetcher.
     *
     * @return string
     *   The output of the template.
     */
    public function populateTemplate($objectInfo)
    {
        $loader = new \Twig_Loader_Filesystem($this->templateDirectory);
        $twig = new \Twig_Environment($loader);
        $xml_from_template = $twig->render($this->templateFilename, (array) $objectInfo);
        return trim($xml_from_template);
    }
}
