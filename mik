#!/usr/bin/env php
<?php
// mik.php

/**
 * Main Move to Islandora Kit script.
 */

// Use composer to load vendor and project classes.
require 'vendor/autoload.php';

use mik\config\Config;
use League\CLImate\CLImate;
use Cocur\BackgroundProcess\BackgroundProcess;

use mik\exceptions\MikErrorException;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

$cmd = new Commando\Command();

$cmd->option('config')
    ->aka('c')
    ->require(true)
    ->describedAs('Path to MIK configuration file.')
    ->file();

$cmd->option('checkconfig')
    ->aka('cc')
    ->describedAs("Applies checks to configuration, does not process objects. " .
        "Must be one of 'snippets', 'urls', 'paths', 'aliases', " .
        "'input_directories', 'csv', or 'all'.")
    ->must(function($cc_option) {
        $cc_options = array('snippets', 'urls', 'paths', 'aliases', 'input_directories', 'csv', 'all');
        return in_array($cc_option, $cc_options);
    });

$cmd->option('limit')
    ->aka('l')
    ->describedAs('Number of objects to process. If omitted, all objects will be processed.')
    ->must(function($limit_value) {
        return preg_match('/^\d+$/', $limit_value);
    });

$configPath = $cmd['config'];

$mikConfig = new Config($configPath);
$settings = $mikConfig->settings;
echo "Commencing MIK." . PHP_EOL;

if ($cmd['checkconfig']) {
    $mikConfig->validate($cmd['checkconfig']);
}

if ($cmd['limit']) {
    $limit = (int) $cmd['limit'];
} else {
    $limit = null;
}

// Basic wallclock timing
$time_start = microtime(true);

// Determine whether we're running on Windows.
if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
    $onWindows = true;
} else {
    $onWindows = false;
}

// On Windows, opcache.enable_cli causes 'Fatal Error Unable to reattach
// to base address' errors when running background processes, and causes
// these processes to fail. Disable it at runtime.
if ($onWindows) {
    ini_set('opcache.enable_cli', '0');
}

// Monolog requires that the date.timezone PHP setting be set else
// it will create an E_WARNING, which will be turned into an excption
// in the set_error_handler function halting the program.
// Provide a default timezone if date.timezone is null in the the PHP INI.
// Load [SYSTEM] settings for user-defined default timezone using config path
if (ini_get('date.timezone') == null || (
        isset($settings['SYSTEM']) && isset($settings['SYSTEM']['date_default_timezone']))
) {
    if (isset($settings['SYSTEM']) && isset($settings['SYSTEM']['date_default_timezone'])) {
        $date_timezone = $settings['SYSTEM']['date_default_timezone'];
        date_default_timezone_set($date_timezone);
    } else {
        // Use a default time-zone.
        date_default_timezone_set('America/Vancouver');
    }
}

// Converts all errors into Exceptions.
// Set here so that you can pass the configuration settings to the MIK Error Exception class.
set_error_handler(
    function ($severity, $message, $file, $line, $code) use ($settings) {
        throw new mik\exceptions\MikErrorException($severity, $message, $file, $line, $code, $settings);
    }
);

// Set up logger ErrorException stream for main mik script.
$pathToLog = $settings['LOGGING']['path_to_log'];
$log = new Logger('ErrorException');
$logStreamHandler= new StreamHandler($pathToLog, Logger::ERROR);
$log->pushHandler($logStreamHandler);

// Set up logger addInfo stream for main mik script.
$logInfo = new Logger('Info');
$logInfoStreamHandler = new StreamHandler($pathToLog, Logger::INFO);
$logInfo->pushHandler($logInfoStreamHandler);

$startTimeMessage =  "MIK started running " . date("F j, Y, g:i a") . PHP_EOL;
$logInfo->addInfo($startTimeMessage);

// Add error-exceptions to the log using
// $log->addError('log message');
// or
// $log->addError('ErrorException', array('details'=>'file_get_contents failed'));

// Fetch metadata records.
$fetcherClass = 'mik\\fetchers\\' . $settings['FETCHER']['class'];
$fetcher = new $fetcherClass($settings);
$numRecs = $fetcher->getNumRecs();

// Instantiate input validator class for 'strict' mode validation. By convention,
// input validators are named the same as the file getter class, but we provide
// the option to use custom validators. In 'realtime' mode the input validator
// is invoked in the Writer class, not here.
if (isset($settings['FILE_GETTER']['input_validator_class'])){
    $input_validator_class = $settings['FILE_GETTER']['input_validator_class'];
} else {
    $input_validator_class = $settings['FILE_GETTER']['class'];
}
try {
    $inputValidatorClass = 'mik\\inputvalidators\\' . $input_validator_class;
    if (isset($settings['FILE_GETTER']['validate_input_type']) &&
        $settings['FILE_GETTER']['validate_input_type'] == 'strict') {
        if (class_exists($inputValidatorClass)) {
            $inputValidator = new $inputValidatorClass($settings);
            if ($inputValidator->validateInput) {
                $validation_results = $inputValidator->validateAll();
                if (in_array(false, $validation_results)) {
                    print "Input validation (strict mode) failed; details in " . $inputValidator->pathToLog . "\n";
                    exit(1);
                }
            }
        }
    }
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating inputValidatorClass',
          'details'=>$exception
        )
    );
}

// Instantiate fileGetter class.
try {
    $fileGetterClass = 'mik\\filegetters\\' . $settings['FILE_GETTER']['class'];
    $fileGetter = new $fileGetterClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating fileGetterClass',
          'details'=>$exception
        )
    );
}

// Create Islandora ingest packages and progress bar.
$records = $fetcher->getRecords($limit);
$numFilteredRecs = count($records);

// Instantiate the "ingest" progress bar based on the limit or the number of filter records.
$climate = new League\CLImate\CLImate;
if (!$onWindows && isset($limit)) {
    $progress = $climate->progress()->total($limit);
} elseif (!$onWindows) {
    $progress = $climate->progress()->total($numFilteredRecs);
}

if ($limit > 0 && $numFilteredRecs > $limit) {
    echo "Creating $limit Islandora ingest packages. Please be patient.\n";
} else {
    echo "Creating $numFilteredRecs Islandora ingest packages. Please be patient.\n";
}

// Set up logger to log the problem record_keys as they occur.
$problem_records_array = array();
$logDirectory = dirname($pathToLog);
$problemRecordsLogFilepath = $logDirectory . DIRECTORY_SEPARATOR . 'problem_records.log';
$logProblemRecords = new Logger('ProblemRecords');
$logProblemRecordsStreamHandler = new StreamHandler($problemRecordsLogFilepath);
$logProblemRecords->pushHandler($logProblemRecordsStreamHandler);
$logProblemRecords->addInfo('Initializing log', array('configuration' => $settings['CONFIG']));

//Instantiate classes used within main MIK foreach
try {
    $metadataClass = 'mik\\metadataparsers\\' . $settings['METADATA_PARSER']['class'];
    $parser = new $metadataClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating metadata class',
          'details'=>$exception
        )
    );
}

try {
    $writerClass = 'mik\\writers\\' . $settings['WRITER']['class'];
    $writer = new $writerClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating writer class',
          'details'=>$exception
        )
    );
}

$record_num = 0;
foreach ($records as $record) {
    $record_key = $record->key;
    if (strlen($record_key) == 0) {
        continue;
    }

    // Slow down execution if configured to do so.
    if (isset($settings['FETCHER']['sleep'])) {
        sleep($settings['FETCHER']['sleep']);
    }

    // Create metadata to return an XML file that can be passed
    // on to the writer.
    try {
        $metadata = $parser->metadata($record_key) . "\n";
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem with metadataparser',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    try {
        $children = $fileGetter->getChildren($record_key);
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem getting children of record',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    // The writer writes metadata XML files and associated content files (files retrieved,
    // modfied, or generated by the file getters and manipulaters) to their output location.
    try {
        $writer->writePackages($metadata, $children, $record_key);
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem writing package',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    $record_num++;
    if ($onWindows) {
        print '.';
    } else {
        $progress->current($record_num);
    }

    // Run any post-write hooks.
    if (isset($settings['WRITER']['postwritehooks'])) {
        $config_path = realpath($configPath);
        if (count($children)) {
            $children_record_ids = implode(',', $children);
        }
        else {
            // If there are no children record IDs, pass a null
            // string as a placeholder.
            $children_record_ids = 'null';
        }
        foreach ($settings['WRITER']['postwritehooks'] as $hook) {
          $cmd = "$hook $record_key $children_record_ids $config_path";
          $process = new BackgroundProcess($cmd);
          $process->run();
        }
    }
}

// Run any shutdown hooks.
if (isset($settings['WRITER']['shutdownhooks'])) {
  echo PHP_EOL;
  foreach ($settings['WRITER']['shutdownhooks'] as $hook) {
    $cmd = sprintf("%s %s", $hook, realpath($configPath));
    echo "Running shutdown hook # $hook" . PHP_EOL;
    exec($cmd);
  }
  echo PHP_EOL;
}


echo "Done. Output packages are in " . $settings['WRITER']['output_directory'] .
    ". Log is at "  . $settings['LOGGING']['path_to_log'] . "\n";

if (count($problem_records_array)>0) {
    echo "There were problems processing some records." . PHP_EOL;
    echo "Please see $problemRecordsLogFilepath ";
    echo "for the log of records that were not processed." . PHP_EOL;
}

restore_error_handler();
// Basic wallclock timing
$time_end = microtime(true);
$time = $time_end - $time_start;
$timeMessage =  "Completed in " . $time/60 . " minutes." . PHP_EOL;
echo $timeMessage;
$logInfo->addInfo($timeMessage);
