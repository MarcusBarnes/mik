#!/usr/bin/env php
<?php
// mik.php

/**
 * Main Move to Islandora Kit script.
 **/
// Basic wallclock timing
$time_start = microtime(true);

// Determine whether we're running on Windows.
if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {
    $onWindows = true;
} else {
    $onWindows = false;
}

// Monolog requires that the date.timezone PHP setting be set else
// it will create an E_WARNING, which will be turned into an excption 
// in the set_error_handler function halting the program.
// Provide a default timezone if date.timezone is null in the the PHP INI.
if (null == ini_get('date.timezone')) {
    date_default_timezone_set('America/Chicago');
}

// On Windows, opcache.enable_cli causes 'Fatal Error Unable to reattach
// to base address' errors when running background processes, and causes
// these processes to fail. Disable it at runtime.
if ($onWindows) {
    ini_set('opcache.enable_cli', '0');
}

// Use composer to load vendor and project classes.
require 'vendor/autoload.php';

use mik\config\Config;
use League\CLImate\CLImate;
use Cocur\BackgroundProcess\BackgroundProcess;

use mik\exceptions\MikErrorException;
use Monolog\Logger;
use Monolog\Handler\StreamHandler;

echo "Commencing MIK." . PHP_EOL;
// Get command line options.
// Assumes --longopts.
// Required --config=path/to/config/ini_file
// Optional --limit=10 (where 10 is the number of input objects to process; 
//            if not set, processes all objects)
//          --checkconfig=type (where type is one of 'snippets', 'urls', 'paths', 
//          'aliases', 'input_directories', or 'all'; just apply checks to configuration, do not process objects)
$options = getopt('', array('config:', 'limit::', 'checkconfig::'));

$configPath = $options['config'];
if (!file_exists($options['config'])) {
    exit("Sorry, can't find " . $options['config'] . "\n");
}

if (isset($options['limit'])) {
    $limit = (int) $options['limit'];
} else {
    $limit = null;
}

// Instantiate a configuration.
$mikConfig = new Config($configPath);
$settings = $mikConfig->settings;

// Converts all errors into Exceptions.
// Set here so that you can pass the configuration settings to the MIK Error Exception class.
set_error_handler(
    function ($severity, $file, $line, $message, $code) use ($settings) {
        throw new mik\exceptions\MikErrorException($severity, $file, $line, $message, $code, $settings);
    }
);

if (isset($options['checkconfig'])) {
    $mikConfig->validate($options['checkconfig']);
}

// Set up logger ErrorException stream for main mik script.
$pathToLog = $settings['LOGGING']['path_to_log'];
$log = new Logger('ErrorException');
$logStreamHandler= new StreamHandler($pathToLog, Logger::ERROR);
$log->pushHandler($logStreamHandler);
$logInfo = new Logger('Info');
$logInfoStreamHandler = new StreamHandler($pathToLog, Logger::INFO);
$logInfo->pushHandler($logInfoStreamHandler);
$startTimeMessage =  "MIK started running " . date("F j, Y, g:i a") . PHP_EOL;
$logInfo->addInfo($startTimeMessage);

// Add error-exceptions to the log using 
// $log->addError('log message');
// or 
// $log->addError('ErrorException', array('details'=>'file_get_contents failed'));

// Fetch metadata records.
$fetcherClass = 'mik\\fetchers\\' . $settings['FETCHER']['class'];
$fetcher = new $fetcherClass($settings);
$numRecs = $fetcher->getNumRecs();

// Instantiate fileGetter class.
try {
    $fileGetterClass = 'mik\\filegetters\\' . $settings['FILE_GETTER']['class'];
    $fileGetter = new $fileGetterClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating fileGetterClass',
          'details'=>$exception
        )
    );
}

// Create Islandora ingest packages and progress bar.
$records = $fetcher->getRecords($limit);
$numFilteredRecs = count($records);

// Instantiate the "ingest" progress bar based on the limit or the number of filter records.
$climate = new League\CLImate\CLImate;
if (!$onWindows && isset($limit)) {
    $progress = $climate->progress()->total($limit);
} elseif (!$onWindows) {
    $progress = $climate->progress()->total($numFilteredRecs);
}

if ($limit > 0 && $numFilteredRecs > $limit) {
    echo "Creating $limit Islandora ingest packages. Please be patient.\n";
} else {
    echo "Creating $numFilteredRecs Islandora ingest packages. Please be patient.\n";
}

// Set up logger to log the problem record_keys as they occur.
$problem_records_array = array();
$logDirectory = dirname($pathToLog);
$problemRecordsLogFilepath = $logDirectory . DIRECTORY_SEPARATOR . 'problem_records.log';
$logProblemRecords = new Logger('ProblemRecords');
$logProblemRecordsStreamHandler = new StreamHandler($problemRecordsLogFilepath);
$logProblemRecords->pushHandler($logProblemRecordsStreamHandler);
$logProblemRecords->addInfo('Initializing log', array('configuration' => $settings['CONFIG']));

//Instantiate classes used within main MIK foreach 
try {
    $metadataClass = 'mik\\metadataparsers\\' . $settings['METADATA_PARSER']['class'];
    $parser = new $metadataClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating metadata class',
          'details'=>$exception
        )
    );
}

try {
    $writerClass = 'mik\\writers\\' . $settings['WRITER']['class'];
    $writer = new $writerClass($settings);
} catch (Exception $exception) {
    $log->addError(
        'ErrorException',
        array(
          'message'=>'problem instantiating writer class',
          'details'=>$exception
        )
    );
}

$record_num = 0;
foreach ($records as $record) {
    $record_key = $record->key;
    if (strlen($record_key) == 0) {
        continue;
    }

    // Slow down execution if configured to do so.
    if (isset($settings['FETCHER']['sleep'])) {
        sleep($settings['FETCHER']['sleep']);
    }

    // Create metadata to return an XML file that can be passed
    // on to the writer.
    try {
        $metadata = $parser->metadata($record_key) . "\n";
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem with metadataparser',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    try {
        $children = $fileGetter->getChildren($record_key);
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem getting children of record',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    // The writer writes metadata XML files and associated content files (files retrieved,
    // modfied, or generated by the file getters and manipulaters) to their output location.
    try {
        $writer->writePackages($metadata, $children, $record_key);
    } catch (Exception $exception) {
        $log->addError(
            'ErrorException',
            array(
                'message'=>'problem writing package',
                'record_key' => $record_key,
                'details'=>$exception
                )
        );
        $problem_records_array[] = $record_key;
        $logProblemRecords->addError($record_key);
        continue;
    }

    $record_num++;
    if ($onWindows) {
        print '.';
    } else {
        $progress->current($record_num);
    }

    // Run any post-write hooks.
    if (isset($settings['WRITER']['postwritehooks'])) {
        $config_path = realpath($configPath);
        if (count($children)) {
            $children_record_ids = implode(',', $children);
        }
        else {
            // If there are no children record IDs, pass a null
            // string as a placeholder.
            $children_record_ids = 'null';
        }
        foreach ($settings['WRITER']['postwritehooks'] as $hook) {
          $cmd = "$hook $record_key $children_record_ids $config_path";
          $process = new BackgroundProcess($cmd);
          $process->run();
        }
    }
}

echo "Done. Output packages are in " . $settings['WRITER']['output_directory'] .
    ". Log is at "  . $settings['LOGGING']['path_to_log'] . "\n";

if (count($problem_records_array)>0) {
    echo "There were problems processing some records." . PHP_EOL;
    echo "Please see $problemRecordsLogFilepath ";
    echo "for the log of records that were not processed." . PHP_EOL;
}

restore_error_handler();
// Basic wallclock timing
$time_end = microtime(true);
$time = $time_end - $time_start;
$timeMessage =  "Completed in " . $time/60 . " minutes." . PHP_EOL;
echo $timeMessage;
$logInfo->addInfo($timeMessage);

