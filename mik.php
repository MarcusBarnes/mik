<?php
// mik.php
/**
 * Main Move to Islandora Kit script.
 **/

// Use composer to load vendor and project classes.
require 'vendor/autoload.php';

// Get command line options.
// Assumes --longopts.
// Required --config path/to/config/ini_file
// Optional --limit=10 (the number of input objects to proces)
// If no --limit is provided, process all input object in a collection.
$options = getopt('', array('config:', 'limit::'));

$configPath = $options['config'];
if (!file_exists($options['config'])) {
    exit("Sorry, can't find " . $options['config'] . "\n");
}

$ini = parse_ini_file($configPath, true);
// print_r($ini);

if (isset($options['limit'])) {
    $limit = $options['limit'];
} else {
    $limit = null;
}

// Configure
use mik\config\Config;

$mikConfig = new Config($configPath);
$settings = $mikConfig->settings;

// Fetch records
$fetcherClass = 'mik\\fetchers\\' . $ini['FETCHER']['class'];
$fetcher = new $fetcherClass($settings);
//echo $fetcher->echoPhrase("The $fetcherClass class has been loaded.");
//echo $fetcher->testMethod();

//echo $fetcher->queryTotalRec();
//echo $fetcher->determineTotalRecords();
//exit();

// Write Islandora ingest packages
//$writerClass = 'mik\\writers\\' . $ini['WRITER']['class'];
//$writer = new $writerClass($settings);
//$writer->createOutputDirectory();

foreach ($fetcher->getRecords($limit)->records as $record) {

      //print_r($record);
      //echo "\n";
      $record_id = $record->pointer;
      // Parse metadata
      $metadtaClass = 'mik\\metadataparsers\\' . $ini['METADATA_PARSER']['class'];
      $parser = new $metadtaClass($settings);
      echo $parser->echoPhrase("The $metadtaClass class been loaded for CONTENTdm record $record_id.\n");

      // When finished, the parser will return an XML file or DOM object that
      // can be passed on to the metadata manipulater.
      // echo $parser->echoPhrase("The $fetcherClass class has returned record $record_id.\n");
      $metadata = $parser->metadata($record_id) . "\n";
      echo "The metatdata file for record $record_id has been created.\n";

      // Manipulate metadata
      // When finished, the manipulater will return an XML file or DOM object that can be passed on to writer.
      // Classes are loaded in metadata parsers.

      // Get files
      echo "Getting file information.\n";
      echo "Please be patient as this may take some time.\n";

      // When finished, the file getter will return some files... whatever that means.
      $fileGetterClass = 'mik\\filegetters\\' . $ini['FILE_GETTER']['class'];
      $fileGetter = new $fileGetterClass($settings);

      $child_pointers = $fileGetter->getChildrenPointers($record_id);

      // echo $fileGetter->echoPhrase("The $fileGetterClass class been loaded for record $record_id.");

      // Manipulate files
      // When finished, the file manipulater will...
      // Classes are loaded in file getters.
      
      // When finished, the writer will have written to their final destination the XML file for each object, and all
      // files retrieved, modfied, or generated by the file getters and manipulaters.
      $writerClass = 'mik\\writers\\' . $ini['WRITER']['class'];
      $writer = new $writerClass($settings);
      $writer->writePackages($metadata, $child_pointers);
      //exit();
      //echo $writer->testMethod() . "\n";
      //echo $writer->echoPhrase("The $writerClass class been loaded for record $record_id.");

}
